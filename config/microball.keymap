#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        CAPITAL {
            bindings = <
&kp Q             &kp W         &kp E         &kp R                          &kp T                                                          &kp Y        &kp U  &lt 5 I    &kp O               &kp P
&kp A             &kp S         &kp D         &kp F                          &kp G        &kp ESCAPE                       &kp EXCLAMATION  &kp H        &kp J  &kp K      &lt_to_layer_0 4 L  &kp MINUS
&mt LEFT_SHIFT Z  &kp X         &kp C         &kp V                          &kp B        &kp TAB                          &kp QUESTION     &kp N        &kp M  &kp COMMA  &kp DOT             &kp SLASH
&kp LCTRL         &kp LEFT_WIN  &kp LEFT_ALT  &lt_to_layer_0 1 INT_MUHENKAN  &lt 2 SPACE  &lt_to_layer_0 4 INT_HENKAN      &kp BACKSPACE    &lt 3 ENTER                                        &lt_to_layer_0 6 DELETE
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        NUMBER {
            bindings = <
&none  &kp F1  &kp F2  &kp F3  &none                               &kp LS(SEMICOLON)  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_MULTIPLY
&none  &kp F4  &kp F5  &kp F6  &none    &none       &kp LS(MINUS)  &kp MINUS          &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp SLASH
&none  &kp F7  &kp F8  &kp F9  &kp F10  &none       &kp INT3       &kp KP_NUMBER_0    &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp COMMA
&none  &none   &none   &trans  &trans   &trans      &trans         &trans                                                                &kp DOT
            >;
        };

        SYMBOL {
            bindings = <
&trans  &none   &kp LS(NUMBER_6)  &kp LS(N5)        &trans                      &trans  &kp LS(NUMBER_8)       &kp LS(NUMBER_9)  &trans            &trans
&trans  &none   &kp LS(NUMBER_4)  &kp LEFT_BRACKET  &trans  &trans      &trans  &trans  &kp RIGHT_BRACKET      &kp NUHS          &kp SEMICOLON     &kp SQT
&trans  &none   &kp EQUAL         &kp LS(INT1)      &trans  &trans      &trans  &trans  &kp LS(RIGHT_BRACKET)  &kp LS(NUHS)      &kp LS(NUMBER_7)  &kp LS(NUMBER_2)
&trans  &trans  &trans            &trans            &trans  &trans      &trans  &trans                                                             &trans
            >;
        };

        ARROW {
            bindings = <
&trans  &trans              &kp UP    &trans         &trans                      &kp HOME  &trans        &kp UP    &trans         &trans
&trans  &kp LEFT            &kp DOWN  &kp RIGHT      &trans  &trans      &trans  &kp END   &kp LEFT      &kp DOWN  &kp RIGHT      &trans
&trans  &kp LG(LEFT_ARROW)  &trans    &kp LG(RIGHT)  &trans  &trans      &trans  &trans    &kp LG(LEFT)  &trans    &kp LG(RIGHT)  &trans
&trans  &trans              &trans    &trans         &trans  &trans      &trans  &trans                                           &trans
            >;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB2  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB4  &mkp MB5  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                              &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        Bluetooth {
            bindings = <
&kp C_VOLUME_UP    &kp C_BRI_INC  &trans  &trans  &trans                              &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&kp C_VOLUME_DOWN  &kp C_BRI_DEC  &trans  &trans  &trans  &trans      &trans          &trans        &trans        &trans        &trans        &trans
&kp C_MUTE         &trans         &trans  &trans  &trans  &trans      &bt BT_CLR_ALL  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans             &trans         &trans  &trans  &trans  &trans      &trans          &trans                                                  &none
            >;
        };
    };
};
